type Query {
    user: User!
    users: [User!]! #remove later
    accounts: [Account!]
    transactions(query: TransactionQueryParams): [Transaction!]
    payees: [Payee!]!
    budgets: [Budget!]!
    budget(id: Int!): Budget!
}

type Mutation {
    createUser(data: CreateUserInput!): AuthPayload!
    updateUser(data: UpdateUserInput!): User!
    loginUser(data: LoginUserInput!): AuthPayload!

    createAccount(data: CreateAccountInput!): Account!
    updateAccount(id: Int!, data: UpdateAccountInput!): Account!

    createTransaction(data: CreateTransactionInput!): Transaction!

    createCategory(data: CreateCategoryInput!): Category!
    updateCategory(id: Int!, data: UpdateCategoryInput!): Category!

    createPayee(data: CreatePayeeInput!): Payee!
    updatePayee(id: Int!, data: UpdatePayeeInput!): Payee!
    
    createRootCategory(data: CreateRootCategoryInput!): RootCategory!
    updateRootCategory(id: Int!, data: UpdateRootCategoryInput!): RootCategory!
}

type User {
    id: ID!
    name: String!
    email: String
}

type Budget {
    id: ID!
    toBeBudgeted: Int!
    user: User!
    accounts: [Account!]
    rootCategories: [RootCategory!]
    payees: [Payee!]
}

type Account {
    id: ID!
    budget: Budget!
    name: String!
    balance: Int!
    workingBalance: Int!
    transactions: [Transaction!]
    #add toBeBudgeted
}

type Transaction {
    id: ID!
    amount: Int!
    date: String!
    memo: String
    cleared: Boolean!
    slices: [TransactionSlice!]!
    account: Account!
    type: TransactionType!
}

type TransactionSlice {
    id: ID!
    transaction: Transaction!
    category: Category!
    amount: Int!
    payee: Payee!
}

type Category {
    id: ID!
    name: String!
    budgeted: Int!
    available: Int!
    parent: RootCategory!
    transactions: [TransactionSlice!]!
}

type RootCategory {
    id: ID!
    name: String!
    categories: [Category!]!
    user: User!
    budgeted: Int!
    available: Int!
}

type Payee {
    id: ID!
    name: String!
    slices: [TransactionSlice!]
    user: User!
}

type AuthPayload {
    token: String!
    user: User!
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
}

input UpdateUserInput {
    name: String
    email: String
    password: String
}

input LoginUserInput {
    email: String!
    password: String!
}

input CreateAccountInput {
    budgetId: Int!
    name: String!
    balance: Int!
}

input UpdateAccountInput {
    name: String
    balance: Int
}

input CreateTransactionInput {
    amount: Int!
    date: String!
    memo: String
    cleared: Boolean!
    slices: [CreateTransactionSliceInput!]!
    accountId: Int!
    type: TransactionType!
}

input CreateTransactionSliceInput {
    categoryId: Int!
    amount: Int!
    payeeId: Int!
}

input CreateCategoryInput {
    name: String!
    budgeted: Int!
    available: Int!
    parent: Int!
    order: Int!
}

input UpdateCategoryInput {
    name: String
    budgeted: Int
    parent: Int
    order: Int
}

input CreateRootCategoryInput {
    budgetId: Int!
    name: String!
    order: Int!
}

input UpdateRootCategoryInput {
    name: String
    order: Int
}

input CreatePayeeInput {
    name: String!
}

input UpdatePayeeInput {
    name: String
}

input TransactionQueryParams {
    accountId: Int
}

enum TransactionType {
  INCOMING
  OUTGOING
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  name           String
  email          String         @unique
  password       String
  accounts       Account[]
  rootCategories RootCategory[]
  payees         Payee[]
  updatedAt      DateTime       @updatedAt
  createdAt      DateTime       @default(now())
}

model Account {
  id             Int           @id @default(autoincrement())
  user           User          @relation(fields: [userId], references: [id])
  userId         Int
  name           String
  balance        Int           @default(0)
  workingBalance Int           @default(0)
  transactions   Transaction[]
  updatedAt      DateTime      @updatedAt
  createdAt      DateTime      @default(now())
}

model Transaction {
  id        Int                @id @default(autoincrement())
  amount    Int
  date      DateTime
  memo      String?
  cleared   Boolean
  slices    TransactionSlice[]
  account   Account            @relation(fields: [accountId], references: [id])
  accountId Int
  type      TransactionType    @default(OUTGOING)
  updatedAt DateTime           @updatedAt
  createdAt DateTime           @default(now())
}

model TransactionSlice {
  id            Int         @id @default(autoincrement())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int
  category      Category?   @relation(fields: [categoryId], references: [id])
  categoryId    Int?
  amount        Int
  updatedAt     DateTime    @updatedAt
  payee         Payee?      @relation(fields: [payeeId], references: [id])
  payeeId       Int?
}

model Category {
  id           Int                @id @default(autoincrement())
  name         String
  budgeted     Int
  available    Int
  parent       RootCategory       @relation(fields: [parentId], references: [id])
  parentId     Int
  order        Int
  updatedAt    DateTime           @updatedAt
  transactions TransactionSlice[]
  @@unique([name, parentId])
}

model RootCategory {
  id         Int        @id @default(autoincrement())
  name       String
  categories Category[]
  order      Int
  user       User       @relation(fields: [userId], references: [id])
  userId     Int
  updatedAt  DateTime   @updatedAt
}

model Payee {
  id     Int                @id @default(autoincrement())
  name   String
  slices TransactionSlice[]
  user   User               @relation(fields: [userId], references: [id])
  userId Int
  @@unique([name, userId])
}

enum TransactionType {
  INCOMING
  OUTGOING
}

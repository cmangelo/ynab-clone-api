generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  name         String
  email        String         @unique
  password     String
  accounts     Account[]
  updatedAt    DateTime       @updatedAt
  createdAt    DateTime       @default(now())
  RootCategory RootCategory[]
  Payee        Payee[]
}

model Account {
  id             Int           @id @default(autoincrement())
  user           User          @relation(fields: [userId], references: [id])
  userId         Int
  balance        Float         @default(0)
  workingBalance Float         @default(0)
  transactions   Transaction[]
  updatedAt      DateTime      @updatedAt
  createdAt      DateTime      @default(now())
}

model Transaction {
  id        Int                @id @default(autoincrement())
  amount    Float
  payee     Payee              @relation(fields: [payeeId], references: [id])
  payeeId   Int
  date      DateTime
  memo      String?
  cleared   Boolean
  slices    TransactionSlice[]
  account   Account            @relation(fields: [accountId], references: [id])
  accountId Int
  type      TransactionType    @default(OUTGOING)
  updatedAt DateTime           @updatedAt
  createdAt DateTime           @default(now())
}

model TransactionSlice {
  id            Int         @id @default(autoincrement())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int
  category      Category?   @relation(fields: [categoryId], references: [id])
  categoryId    Int?
  amount        Float
  updatedAt     DateTime    @updatedAt
  Payee         Payee?      @relation(fields: [payeeId], references: [id])
  payeeId       Int?
}

model Category {
  id               Int                @id @default(autoincrement())
  budgeted         Float
  available        Float
  parent           RootCategory       @relation(fields: [parentId], references: [id])
  parentId         Int
  order            Int
  updatedAt        DateTime           @updatedAt
  TransactionSlice TransactionSlice[]
}

model RootCategory {
  id         Int        @id @default(autoincrement())
  name       String
  categories Category[]
  order      Int
  user       User       @relation(fields: [userId], references: [id])
  userId     Int
  updatedAt  DateTime   @updatedAt
}

model Payee {
  id          Int                @id @default(autoincrement())
  slices      TransactionSlice[]
  user        User               @relation(fields: [userId], references: [id])
  userId      Int
  Transaction Transaction[]
}

enum TransactionType {
  INCOMING
  OUTGOING
}
